package com.InKyung.review;

import com.querydsl.jpa.impl.JPAQueryFactory;
import jakarta.persistence.EntityManager;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@RequiredArgsConstructor //private 변수는 @AllArgsConstructor 말고 @RequiredArgsConstructor도 가능.
@Configuration // 이 클래스가 스프링의 설정 클래스임을 나타냅니다. 스프링은 이 클래스를 참고하여 빈(Bean)을 생성하고 관리.
public class QuerydsConfig { // JPAQueryFactory를 주입받아 QueryDSL을 사용할 수 있도록 설정

    private final EntityManager em; // EntityManager는 JPA에서 엔터티의 생성, 조회, 수정 삭제를 수행하는 객체이다

    @Bean // @Bean은 메소드 수준의 어노테이션. Spring Bean을 등록하기 위한 어노테이션입니다.
    // Spring Bean이란 스프링이 관리하는 오브젝트로, 스프링 프레임워크 컨테이너에 의해 인스턴스화되고, 구성되고, 관리되는 객체.
    public JPAQueryFactory queryFactory(){
        return new JPAQueryFactory(em);
    }
}
/*
Hibernate: drop table if exists test cascade
Hibernate: create table test (age integer, id bigint generated by default as identity, name varchar(255), primary key (id))
: H2 DB에 테이블 생성 의미.

  * QueryDSL
     쿼리를 문자가 아닌 코드로 작성해도, 쉽고 간결하며 그 모양도 쿼리와 비슷하게 개발 할 수 있는 프로젝트가 바로 QueryDSL입니다. QueryDSL도 Criteria처럼 JPQL 빌더 역할을 하는데 JPA Criteria를 대체 가능.
     QueryDSL은 오픈소스 프로젝트이며, 처음에는 HQL(Hibernate Query Language)을 코드로 작성할 수 있도록 해주는 프로젝트로 시작해서 지금 JPA, JDO, JDBC, Lucene, Hibernate Search, MongoDB, Collections 및 RDFBean을 지원.

  * QueryDSL 설정
     1. gradle 설정
         build.gradle 설정.

     2. Configuration 설정
         JPAQueryFactory를 주입받아 QueryDSL을 사용할 수 있도록 설정

     3. Spring Data Jpa Custom Repository 적용
         Spring Data Jpa에서는 Custom Repository를 JpaRepository 상속 클래스에서 사용할 수 있도록 지원합니다.
         Repository는 JpaRepository 인터페이스를 상속받아서 기본적인 메서드를 사용할 수 있도록 정의한 인터페이스
         RepositoryCustom은 QueryDSL을 사용하기 위한 메소드를 정의한 인터페이스
         RepositoryImpl를 TodoRepositoryCustom 인터페이스에서 정의된 메소드를 구현하는 클래스

   * JPAQueryFactory
     : JPAQueryFactory란 JPA의 엔터티를 이용하여 JPQLQuery를 보다 쉽고 편리하게 작성할 수 있는 QueryDsl의 도구


 */
